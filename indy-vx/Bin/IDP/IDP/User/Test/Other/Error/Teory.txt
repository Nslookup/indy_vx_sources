 _________________________________________________________
Разрушение указателей это только один из возможных способов 
генерации исключения. Вся гибкость техники заключается в об
работке исключения, трассировке и бактрейсе. Далее рассмотр
ен есчо один способ генерации останова.
В kernel32.dll имеются три функции, которые позволяют загру
зить код ошибки в TEB. Это функции _SetLastError, _BaseSetL
astNTError и SetLastError. Экспортируется только последняя 
и является переходником на функцию из нтдлл RtlSetLastWin32
Error. Первые две функции помимо основной задачи выполняют 
сравнение кода ошибки со значением не экспортируемой переме
нной g_dwLastErrorToBreakOn и оно отлично от нуля и равно у
станавливаемому коду ошибки, то генерируется останов(Int3) 
вызовом DbgBreakPoint(). Ссылок на эти две функции множеств
о, большинство апи в этом модуле возвращают код ошибки. Цел
ью использования этого механизма является генерация ошибки, 
которая приведёт к останову, после чего будет выполнен бакт
рейс/трассировка до целевого кода. Следует создать условия, 
при которых апи завершится не корректно. К этому могут прив
ести не валидные значения, передаваемые в функции и внутрен
ние системные структуры/переменные.
Для поиска не экспортируемых переменных, в частности переме
нной g_dwLastErrorToBreakOn можно применить трассировку код
а, который обращается к искомой переменной. В данном случае 
это трассировка любой из функий, изменяющих код ошибки. При 
трассировке из инструкций mov eax,dword ptr ds:[XXXX] извле
кается смещение и сохраняется. Это выполняется до изменения 
TEB.LastErrorValue, когда это значение изменится, то послед
нее сохранённое смещение и будет указывать на g_dwLastError
ToBreakOn.
 _________________________________________________________