                       -
 Двиг от пермутатора создающий граф. Необходим 
 для разбора кода при поиске особо проблемных 
 ссылок и определения начала процедуры по указ
 ателю в ней(благодаря возможности двусторонне
 й трассировки(вверх и вниз по графу)). Техник
 а IDP основана на генерации исключения внутри 
 апи, часто весьма глубоко, поэтому возникает 
 задача определения начала процедуры.
 Имеется процедура A, которая вызывает процеду
 ру B, а она вызывает C. Известен адрес процед
 уры A и указатель X внутри процедуры C. Необх
 одимо найти адрес процедуры B:
  .----------.   .----------.   .----------.
  | A:       |   | B:       |   | C:       |
  |   ~      |   |   ~      |   |    ~     |
  |   CALL B |   |   CALL C |   | X: ~     |
  |   ~      |   | F:~      |   |    ~     |
  '----------'   '----------'   '----------'
 1. Динамический поиск.
 При динамическом поиске(когда код исполняется, 
 инструкция по адресу X генерирует исключение) 
 мы выполним бактрес стековых фреймов и получи
 м адрес возврата F в процедуру B. Далее мы ди
 зассемблируем код ниже адреса F и получим из 
 инструкции смещение процедуры C. Выполнив теж
 е действия есчо раз мы получим адрес возврата 
 из процедуры B в процедуру A и смещение из пр
 оцедурного ветвления до процедуры B.
 2. Статический поиск.
 В графе не все инструкции связаны обратными с
 сылками, по причине того, что например ветвле
 ний на инструкцию может быть несколько. Изнач
 ально создаётся граф для процедуры A с раскры
 тием вложенных процедур. Находим в этом графе 
 описатель инструкции по адресу X. Далее выпол
 няем бактрейс графа. Извлекаем из описателя о
 братные ссылки(на предыдущую инструкцию) в ци
 кле. Когда обратной ссылки не окажется, то ищ
 ем в графе ветвление(не процедурное) на найде
 нный описатель и снова выполняем бактрейс гра
 фа. Если ветвления не окажется то ищем в граф
 е процедурное ветвление на описатель. Далее и
 звлекаем из него адрес ветвления и выполняем 
 тоже самое для поиска начала процедуры B.
                       -